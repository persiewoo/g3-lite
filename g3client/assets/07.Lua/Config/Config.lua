--[[
this file is auto-generated by Configer Tools
]]

Config = Config or {}
local Config = Config
local c = Config


local setmetatable=setmetatable
local function i(targetTable,keyList,valueList) for it=1,#keyList do targetTable[keyList[it]]=valueList[it] end end
local function getConfigByID(self,id) for it=1,#(self.configs) do if self.configs[it].id == id then return self.configs[it] end end end
local function getConfigByName(self,name) for it=1,#(self.configs) do if self.configs[it].name == name then return self.configs[it] end end end
local function cet(count) local ret={} for it=1,count do ret[it]={} end return ret end
local function fillConfigData(table,keyList,valueList) for it=1,#table do i(table[it],keyList,valueList[it]) end end

local configMetatable=
{
    __index=function(t,k) if type(k) == 'number' then return t:getConfigByID(k) else return t:getConfigByName(k) end end,
    __newindex=function(t,k) print('config is readonly,do not modify') end,
}
local function b(count) return setmetatable({configs = cet(count),getConfigByID=getConfigByID,getConfigByName=getConfigByName},configMetatable) end

c.Avatar = b(4)
c.BattleMap = b(3)
c.Character = b(4)
c.Dungeon = b(1)
c.LoadingType = b(3)
c.Skill = b(5)
c.Spell = b(1)
c.ViewLayer = b(5)
c.AttackType = {physic = 1,magic = 2,assist = 3}
c.CharacterType = {hero = 1,boss = 2,monster = 3}
c.EmitterType = {bow = 1}
c.SkillType = {generic = 1,skill = 2,ultimate = 3}

configer_s1 = function(v1,v2) return {x = v1,y = v2} end

--Constants
c.Constants = require 'Config.Db_Constants'

--ViewConstants
c.ViewConstants = require 'Config.Db_ViewConstants'

--Avatar
fillConfigData(c.Avatar.configs,table.unpack(require 'Config.Db_Avatar'))

--BattleMap
fillConfigData(c.BattleMap.configs,table.unpack(require 'Config.Db_BattleMap'))

--Character
fillConfigData(c.Character.configs,table.unpack(require 'Config.Db_Character'))

--Dungeon
fillConfigData(c.Dungeon.configs,table.unpack(require 'Config.Db_Dungeon'))

--LoadingType
fillConfigData(c.LoadingType.configs,table.unpack(require 'Config.Db_LoadingType'))

--Skill
fillConfigData(c.Skill.configs,table.unpack(require 'Config.Db_Skill'))

--Spell
fillConfigData(c.Spell.configs,table.unpack(require 'Config.Db_Spell'))

--ViewLayer
fillConfigData(c.ViewLayer.configs,table.unpack(require 'Config.Db_ViewLayer'))


return Config